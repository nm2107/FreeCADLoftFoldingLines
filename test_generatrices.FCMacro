# -*- coding: utf-8 -*-

import FreeCAD
from math import ceil, floor
from DraftGeomUtils import isPtOnEdge, findIntersection
from DraftVecUtils import closest

def serializeVector(v: FreeCAD.Vector) -> str:
    return "%f;%f;%f" % (v.x, v.y, v.z)


def getPlaneCenter(plane: Part.Plane) -> FreeCAD.Vector:
    return FreeCAD.Vector(plane.Position.x, plane.Position.y, plane.Position.z)


def getWireMaxBoundBox(wire: Part.Wire) -> float:
    return max(wire.BoundBox.XMax, wire.BoundBox.YMax, wire.BoundBox.ZMax)

def getIntersectionPoint(line: Part.Line, wire: Part.Wire) -> FreeCAD.Vector | None:
    dists = line.distToShape(wire)

    if not len(dists) > 1:
        return None

    if not len(dists[1]) > 0:
        return None

    if not len(dists[1][0]) > 1:
        return None

    return dists[1][0][1]


def getEdgeOnWhichPointIsOn(point, edges) -> Part.Edge | Part.Line | None:
    for edge in edges:
        if isPtOnEdge(point, edge):
            return edge

    return None


def getEdgeEndClosestToPoint(point: FreeCAD.Vector, edge: Part.Edge | Part.Line) -> FreeCAD.Vector:
    vertexes = edge.Vertexes
    end1 = vertexes[0].Point

    if not len(vertexes) > 1:
        return end1

    end2 = vertexes[1].Point
    dist1 = point.distanceToPoint(end1)
    dist2 = point.distanceToPoint(end2)

    if dist1 < dist2:
        return end1
    else:
        return end2


def getVectorBewteenTwoVertexes(va: FreeCAD.Vector, vb: FreeCAD.Vector) -> FreeCAD.Vector:
    """Returns a vector aligned with the given vertexes.

    Parameters
    ----------
    va : FreeCAD.Vector
    vb : FreeCAD.Vector

    Returns
    -------
    FreeCAD.Vector
    """

    vec: FreeCAD.Vector = None

    if va.Length > vb.Length:
        vec = va.sub(vb)
    else:
        vec = vb.sub(va)

    return vec


def getVectorBewteenTwoPlanes(pa: Part.Plane, pb: Part.Plane) -> FreeCAD.Vector:
    """Returns a vector aligned with the given planes centers.

    Parameters
    ----------
    pa : Part.Plane
    pb : Part.Plane

    Returns
    -------
    FreeCAD.Vector
    """

    return getVectorBewteenTwoVertexes(getPlaneCenter(pa), getPlaneCenter(pb))


def solveRayInitVertexes(wireA: Part.Wire, wireB: Part.Wire, planeB: Part.Plane) -> (FreeCAD.Vector, FreeCAD.Vector):
    """Returns a tuple of vertexes to use on planeA and planeB to initialize the
    first ray orientation (i.e. the ray goes by the plane center and this vertex).

    Parameters
    ----------
    wireA : Part.Wire
    wireB : Part.Wire
    planeB: Part.Plane

    Returns
    -------
    (rayInitVertexA: FreeCAD.Vector, rayInitVertexB: FreeCAD.Vector)
    """
    rayInitVertexA = FreeCAD.Vector(wireA.Vertexes[0].Point)

    projectionPlaneCenter = getPlaneCenter(planeB)
    planeAxis = FreeCAD.Vector(planeB.Axis)
    projectionPlane = Part.Plane(projectionPlaneCenter, planeAxis)

    # project the rayInitVertexA on planeB
    aProjection = FreeCAD.Vector(rayInitVertexA)
    aProjection.projectToPlane(projectionPlaneCenter, planeAxis)

    rayLength = getWireMaxBoundBox(wireB)
    ray = Part.makeLine(projectionPlaneCenter, buildInitialRayEndVertice(projectionPlaneCenter, aProjection, rayLength))

    intersectionPoint = getIntersectionPoint(ray, wireB)
    edge = getEdgeOnWhichPointIsOn(intersectionPoint, wireB.Edges)

    if not intersectionPoint or not edge:
        # fallback to naive solution using the closest points bewteen the two wires
        dists = wireFaceA.distToShape(wireFaceB)
        rayInitVertexA = dists[1][0][0]
        rayInitVertexB = dists[1][0][1]

        return (rayInitVertexA, rayInitVertexB)


    rayInitVertexB = getEdgeEndClosestToPoint(intersectionPoint, edge)

    return (rayInitVertexA, rayInitVertexB)


def buildInitialRayEndVertice(planeCenter: FreeCAD.Vector, rayInitVertex: FreeCAD.Vector, rayLength: float) -> FreeCAD.Vector:
    """Builds and returns the vertice used to draw a line of length `rayLength`
    starting at `planeCenter` and going through `rayInitVertex`.
    """
    rayInitLength = planeCenter.distanceToPoint(rayInitVertex)
    # @see https://stackoverflow.com/a/14883334
    rayInitVector = rayInitVertex.sub(planeCenter)
    if (rayInitLength < rayLength):
        # make the initial ray as long as rayLength
        rayInitVector.multiply(rayLength / rayInitLength)

    return planeCenter.add(rayInitVector)


def solveRayAngleFaceB(planeA, planeB, planesAxis, rayInitVertexA, rayInitVertexB, angle):
    """Depending on the faces orientation, the ray angle could be in the opposite
    direction for the B face.
    This fn returns either angle or angle * -1.
    """
    aCenter = getPlaneCenter(planeA)
    bCenter = getPlaneCenter(planeB)
    projectionPlaneCenter = bCenter
    projectionPlane = Part.Plane(projectionPlaneCenter, planesAxis)

    rayLength = 100.0
    aRay = Part.makeLine(aCenter, buildInitialRayEndVertice(aCenter, rayInitVertexA, rayLength))
    bRay = Part.makeLine(bCenter, buildInitialRayEndVertice(bCenter, rayInitVertexB, rayLength))
    bBisRay = Part.makeLine(bCenter, buildInitialRayEndVertice(bCenter, rayInitVertexB, rayLength))

    aRotationAxis = FreeCAD.Vector(planeA.Axis)
    bRotationAxis = FreeCAD.Vector(planeB.Axis)

    aRay.rotate(aCenter, aRotationAxis, angle)
    bRay.rotate(bCenter, bRotationAxis, angle)
    bBisRay.rotate(bCenter, bRotationAxis, angle * -1)

    aProjection = FreeCAD.Vector(aRay.Vertexes[1].Point)
    aProjection.projectToPlane(projectionPlaneCenter, planesAxis)

    bProjection = FreeCAD.Vector(bRay.Vertexes[1].Point)
    bProjection.projectToPlane(projectionPlaneCenter, planesAxis)

    bBisProjection = FreeCAD.Vector(bBisRay.Vertexes[1].Point)
    bBisProjection.projectToPlane(projectionPlaneCenter, planesAxis)

    distAB = aProjection.distanceToPoint(bProjection)
    distABBis = aProjection.distanceToPoint(bBisProjection)

    if (distAB < distABBis):
        return angle
    else:
        return angle * -1



def getTotalLengthOfNonLinearEdges(edges: [Part.Edge]) -> float:
    totalLength = 0.0

    for edge in edges:
        if isinstance(edge.Curve, Part.Line):
            continue

        totalLength += edge.Length

    return totalLength

def getFoldingPointsOnStraightEdge(edge: Part.Edge) -> [FreeCAD.Vector]:
    return [edge.valueAt(edge.FirstParameter), edge.valueAt(edge.LastParameter)]


def buildFoldingPointsOnWire(wire: Part.Wire, maxPointsCount: int) -> [FreeCAD.Vector]:
    # order the edges in a geometrical way (the end of one edge matches the start of the next one)
    # edges = Part.__sortEdges__(wire.Edges)
    edges = wire.Edges
    foldingPoints = dict()
    totalLengthOfNonLinearEdges = getTotalLengthOfNonLinearEdges(edges)

    chunksOffset = 0
    if len(edges) == 1:
        chunksOffset = 1

    for edge in edges:
        if isinstance(edge.Curve, Part.Line):
            # pick the start and end points of a straight line
            for pt in getFoldingPointsOnStraightEdge(edge):
                foldingPoints[serializeVector(pt)] = pt

            continue

        # compare the length of this non linear edge to the total length of
        # non linear edges to know how many folding points we should place on it
        pointsToPlaceCount = round((edge.Length * maxPointsCount) / totalLengthOfNonLinearEdges)

        # pick the evenly spaced points on edge
        for pt in edge.discretize(Number=pointsToPlaceCount + chunksOffset):
            foldingPoints[serializeVector(pt)] = pt

    return list(foldingPoints.values())


class FoldingLine():
    """A folding line on the 3D shape."""
    def __init__(self, pointFaceA: FreeCAD.Vector, pointFaceB: FreeCAD.Vector):
        self.pointFaceA = pointFaceA
        self.pointFaceB = pointFaceB

    def getPointFaceA(self) -> FreeCAD.Vector:
        return self.pointFaceA

    def getPointFaceB(self) -> FreeCAD.Vector:
        return self.pointFaceB


class FlatFoldingLine(FoldingLine):
    """A flatten representation of a FoldingLine"""
    pass


# def build3DFoldingLines(pointsToProject, projectionFace, projectionAxis, pointsOnProjectionFace, isProjectionOnFaceB):
#     foldingLines: [FoldingLine] = []
#     projectionPlaneCenter = getPlaneCenter(projectionFace)

#     for pointToProject in pointsToProject:
#         projection = FreeCAD.Vector(pointToProject.x, pointToProject.y, pointToProject.z)
#         projection.projectToPlane(projectionPlaneCenter, projectionAxis)

#         closestPointIndex = closest(projection, pointsOnProjectionFace)
#         closestPoint = pointsOnProjectionFace[closestPointIndex]

#         if isProjectionOnFaceB:
#             foldingLine = FoldingLine(pointToProject, closestPoint)
#         else:
#             foldingLine = FoldingLine(closestPoint, pointToProject)

#         foldingLines.append(foldingLine)

#     return foldingLines


def findVectorHavingTheClosestDirectionToPlanesAxis(baseVertex: FreeCAD.Vector, vectorsPool: [FreeCAD.Vector], planesAxis: FreeCAD.Vector) -> FreeCAD.Vector:
    foundVector: FreeCAD.Vector = None
    foundDot = 0.0
    normalizedPlanesAxis = FreeCAD.Vector(planesAxis.x, planesAxis.y, planesAxis.z)
    normalizedPlanesAxis.normalize()

    for v in vectorsPool:
        baseVertexToTestedVectorAxis = getVectorBewteenTwoVertexes(baseVertex, v)
        baseVertexToTestedVectorAxis.normalize()
        dot = baseVertexToTestedVectorAxis.dot(normalizedPlanesAxis)

        if dot > foundDot:
            foundDot = dot
            foundVector = v

    return foundVector


def buildFoldingLinesAtStraightEdgesEnds(wire: Part.Wire, otherFacePoints: [FreeCAD.Vector], planesAxis: FreeCAD.Vector) -> [FoldingLine]:
    foldingLines: [FoldingLine] = []
    edges = wire.Edges

    for edge in edges:
        if not isinstance(edge.Curve, Part.Line):
            continue

        edgeEnds = getFoldingPointsOnStraightEdge(edge)
        edgeStart = edgeEnds[0]
        edgeEnd = edgeEnds[1]
        edgeMiddle = edge.valueAt(edge.LastParameter / 2)

        relatedPoint = findVectorHavingTheClosestDirectionToPlanesAxis(edgeMiddle, otherFacePoints, planesAxis)

        foldingLines.append(FoldingLine(relatedPoint, edgeStart))
        foldingLines.append(FoldingLine(relatedPoint, edgeEnd))

    return foldingLines


def arePointsIdentical(pointA, pointB):
    return 0.0 == pointA.distanceToPoint(pointB)


# def filterPoints(pointsA, pointsB):
#     """When consecutive points are on the same emplacement, skip them.
#     """
#     filteredPointsA = []
#     filteredPointsB = []

#     for i in range(len(pointsA)):
#         currentPointA = pointsA[i]
#         currentPointB = pointsB[i]

#         if i > 0:
#             if arePointsIdentical(currentPointA, pointsA[0]) and arePointsIdentical(currentPointB, pointsB[0]):
#                 continue

#             if arePointsIdentical(currentPointA, pointsA[i - 1]) and arePointsIdentical(currentPointB, pointsB[i - 1]):
#                 continue

#         filteredPointsA.append(currentPointA)
#         filteredPointsB.append(currentPointB)

#     return (filteredPointsA, filteredPointsB)


def showFoldingLinesOn3DShape(foldingLines: [FoldingLine]) -> None:
    """Draw the folding lines on the 3D shape.
    """
    lines = []

    for foldingLine in foldingLines:
        lines.append(Part.makeLine(foldingLine.getPointFaceA(), foldingLine.getPointFaceB()))

    Part.show(Part.makeCompound(lines))


def flattenFoldingLine(foldingLines: [FoldingLine], previousFlatFoldingLine: FlatFoldingLine, i: int) -> FlatFoldingLine:
    """Computes the flatten representation of a folding line."""
    if (i < 1):
        return

    pointA = foldingLines[i].getPointFaceA()
    pointB = foldingLines[i].getPointFaceB()
    previousPointA = foldingLines[i - 1].getPointFaceA()
    previousPointB = foldingLines[i - 1].getPointFaceB()
    previousAFlat = previousFlatFoldingLine.getPointFaceA()
    previousBFlat = previousFlatFoldingLine.getPointFaceB()

    aStepLength = previousPointA.distanceToPoint(pointA)
    bStepLength = previousPointB.distanceToPoint(pointB)
    distAB = pointA.distanceToPoint(pointB)
    diagLength = previousPointA.distanceToPoint(pointB)

    # use circles to find the position of the bFlat point
    circleBStep = Part.makeCircle(bStepLength, previousBFlat)
    circleDiag = Part.makeCircle(diagLength, previousAFlat)
    bFlat = findIntersection(circleBStep, circleDiag)[0]

    # use circles to find the position of the aFlat point
    circleAStep = Part.makeCircle(aStepLength, previousAFlat)
    circleAFlatBFlat = Part.makeCircle(distAB, bFlat)
    aFlat = findIntersection(circleAStep, circleAFlatBFlat)[-1]

    return FlatFoldingLine(aFlat, bFlat)


def flattenFoldingLines(foldingLines: [FoldingLine]) -> [FlatFoldingLine]:
    """Computes the points of the flatten folding lines"""
    flatFoldingLines = []
    i = 0

    distAB = foldingLines[i].getPointFaceA().distanceToPoint(foldingLines[i].getPointFaceB())
    flatFoldingLine = FlatFoldingLine(FreeCAD.Vector(0.0, 0.0, 0.0), FreeCAD.Vector(distAB, 0.0, 0.0))

    previousFlatFoldingLine = flatFoldingLine
    flatFoldingLines.append(previousFlatFoldingLine)
    i += 1

    while (i < len(foldingLines)):
        previousFlatFoldingLine = flattenFoldingLine(foldingLines, previousFlatFoldingLine, i)
        flatFoldingLines.append(previousFlatFoldingLine)
        i += 1

    return flatFoldingLines


def buildEdges(points: [FreeCAD.Vector], edges = []) -> None:
    """Link the given points by making edges, and add the created edges to the
    given edges array parameter.
    """
    i = 1

    while (i < len(points)):
        previousPoint = points[i - 1]
        currentPoint = points[i]
        i += 1

        if (arePointsIdentical(previousPoint, currentPoint)):
            continue

        edges.append(Part.makeLine(previousPoint, currentPoint))


def drawFlattenRepresentation(flatFoldingLines: [FlatFoldingLine]) -> None:
    """Draw the flatten representation of the shape and its folding lines.
    """
    edges = []
    foldingLinesCount = len(flatFoldingLines)

    flattenPointsA = []
    flattenPointsB = []

    for i in range(foldingLinesCount):
        flattenPointsA.append(flatFoldingLines[i].getPointFaceA())
        flattenPointsB.append(flatFoldingLines[i].getPointFaceB())

    # the flat edges of A & B wires
    buildEdges(flattenPointsA, edges)
    buildEdges(flattenPointsB, edges)

    i = 0
    while (i < foldingLinesCount):
        # the folding lines
        edges.append(Part.makeLine(flatFoldingLines[i].getPointFaceA(), flatFoldingLines[i].getPointFaceB()))
        i += 1

    # Sometimes there's a `BRepAdaptor_Curve::No geometry` error when trying to draw
    # the flatten representation as a compound. If this occurs, you can still
    # downgrade the shape into multiple edges using the Draft->downgrade button
    # and place all the edges into a directory (i.e. a group).
    Part.show(Part.makeCompound(edges))


def getWiresFromGuiSelection() -> (Part.Wire, Part.Wire):
    sel = Gui.Selection.getSelection()

    if 2 != len(sel):
        raise ValueError("Please select two sketches.")

    for s in sel:
        if "Sketcher::SketchObject" != s.TypeId:
            raise ValueError("Wrong selection, only sketches are allowed.")

    skA = sel[0]
    skB = sel[1]

    return (skA.Shape, skB.Shape)



def main():
    # @TODO : GUI to set angle, show folding lines on 3D shape opt
    angle = 10.0
    maxPointsCount = ceil(360 / angle)

    wireFaceA, wireFaceB = getWiresFromGuiSelection()

    planeA = wireFaceA.findPlane()
    planeB = wireFaceB.findPlane()
    planesAxis = getVectorBewteenTwoPlanes(planeA, planeB)

    # where to place the initial ray on each face
    # rayInitVertexA, rayInitVertexB = solveRayInitVertexes(wireFaceA, wireFaceB, planeB)

    # rayAngleFaceA = angle
    # could be in the opposite direction of rayAngleFaceA
    # rayAngleFaceB = solveRayAngleFaceB(planeA, planeB, planesAxis, rayInitVertexA, rayInitVertexB, angle)

    pointsWireA = buildFoldingPointsOnWire(wireFaceA, maxPointsCount)
    pointsWireB = buildFoldingPointsOnWire(wireFaceB, maxPointsCount)


    def dbgg(foldingLines):
        lines = []
        for foldingLine in foldingLines:
            lines.append(Part.makeLine(foldingLine.getPointFaceA(), foldingLine.getPointFaceB()))

        if (len(lines) > 0):
            Part.show(Part.makeCompound(lines))

    dbgg(buildFoldingLinesAtStraightEdgesEnds(wireFaceA, pointsWireB, planesAxis))
    dbgg(buildFoldingLinesAtStraightEdgesEnds(wireFaceB, pointsWireA, planesAxis))

    return

    # def dbgg(pts):
    #     for pt in pts:
    #         Part.show(Part.Vertex(pt.x, pt.y, pt.z))

    # dbgg(pointsWireA)
    # dbgg(pointsWireB)
    # return

    # if len(pointsWireB) > len(pointsWireA):
    # # if wireFaceB.Length > wireFaceA.Length:
    #     foldingLines = build3DFoldingLines(pointsWireB, planeA, planesAxis, pointsWireA, False)
    # else:
    #     foldingLines = build3DFoldingLines(pointsWireA, planeB, planesAxis, pointsWireB, True)

    showFoldingLinesOn3DShape(foldingLines)

    flatFoldingLines = flattenFoldingLines(foldingLines)
    drawFlattenRepresentation(flatFoldingLines)


main()
